{"version":3,"file":"src_app_doctor-messages_doctor-messages_module_ts.js","mappings":"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","sources":["./src/app/doctor-messages/doctor-messages-routing.module.ts","./src/app/doctor-messages/doctor-messages.module.ts","./src/app/doctor-messages/doctor-messages.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DoctorMessagesPage } from './doctor-messages.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DoctorMessagesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DoctorMessagesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DoctorMessagesPageRoutingModule } from './doctor-messages-routing.module';\n\nimport { DoctorMessagesPage } from './doctor-messages.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DoctorMessagesPageRoutingModule\n  ],\n  declarations: [DoctorMessagesPage]\n})\nexport class DoctorMessagesPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LocalStorageService } from '../services/local-storage.service';\nimport { Storage } from '@capacitor/storage';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user';\nimport { BedsService } from '../services/beds.service';\nimport { MessageModel } from '../models/message-model';\nimport { MqttService } from '../services/mqtt.service';\nimport { Bed } from '../models/bed';\n\n@Component({\n  selector: 'app-doctor-messages',\n  templateUrl: './doctor-messages.page.html',\n  styleUrls: ['./doctor-messages.page.scss'],\n})\nexport class DoctorMessagesPage implements OnInit {  \n  localDoctor : User = new User(0,\"\",\"\",\"\",\"\",0,\"\");\n  doctorId: number;\n  doctorName: string;\n  public BedLocal: Bed = new Bed(0,0,0,0);\n  public messages: Array<MessageModel> = new Array;\n  \n  constructor(private activatedRoute: ActivatedRoute,\n    public localSto: LocalStorageService,    \n    public bedlocal: BedsService,\n    private router:Router,\n    public MQTTServ:MqttService,\n    public userServ: UserService\n    ) { \n    this.doctorId = 0;\n    this.doctorName=\"\";\n  }\n\n  ngOnInit() {    \n    this.localDoctor= this.userServ.getUser();\n    this.doctorName=this.localDoctor.username;\n    this.doctorId=this.localDoctor.userId;\n    //this.BedLocal=this.bedS.getBed();\n    this.eventsSubscription();\n    \n    }\n    \n    \n\n  public goChat(i: string){\n    /*   this.router.navigate(['/chat/]);        */\n    console.log('cama:'+i);\n    this.bedlocal.setBedId(parseInt(i));\n    console.log('cama:'+i);\n     this.router.navigate(['/chat/']);        \n      }\n  /**\n   * Subscription for receiving messages\n   * kind of messages waiting for: {\"_bedId\":2,\"_content\":\"alert\",\"_time\":\"today\",\"_username\":\"system\"}\n   * It is only used the bedId parameter\n   */\n   eventsSubscription(){\n    //let topic=\"/Beds/caller-events\";\n    let topic=\"/Beds/status\";\n    let receivedMessage;\n    console.log(\"subscribed\")\n    this.MQTTServ.MQTTClientLocal.subscribe(topic).on(Message=>{\n      console.log(\"received\")\n      console.log(Message.string);            \n    let localMessage = JSON.parse(Message.string);      \n    let local2=Message.string;\n    console.log(localMessage[0].message);    \n    this.messages=[];\n    localMessage.forEach(element => {      \n      {        \n      receivedMessage = new MessageModel(\"\",\"\",element.id,\"\",element.st);\n      this.messages.push(receivedMessage);\n     }\n    });\n    \n  \n    });\n  }\n    \n}\n"],"names":[],"sourceRoot":"webpack:///"}
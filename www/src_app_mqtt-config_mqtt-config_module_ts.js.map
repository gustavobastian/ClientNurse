{"version":3,"file":"src_app_mqtt-config_mqtt-config_module_ts.js","mappings":"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","sources":["./src/app/mqtt-config/mqtt-config-routing.module.ts","./src/app/mqtt-config/mqtt-config.module.ts","./src/app/mqtt-config/mqtt-config.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MqttConfigPage } from './mqtt-config.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MqttConfigPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MqttConfigPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MqttConfigPageRoutingModule } from './mqtt-config-routing.module';\n\nimport { MqttConfigPage } from './mqtt-config.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MqttConfigPageRoutingModule\n  ],\n  declarations: [MqttConfigPage]\n})\nexport class MqttConfigPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { StorageService } from '../services/storage.service';\nimport { Storage } from '@capacitor/storage';\nimport { LocalStorageService } from '../services/local-storage.service';\nimport {Client, connect} from 'rsup-mqtt'\nimport { Capacitor } from '@capacitor/core';\nimport { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\n\n\n\n\n\n@Component({\n  selector: 'app-mqtt-config',\n  templateUrl: './mqtt-config.page.html',\n  styleUrls: ['./mqtt-config.page.scss'],\n})\nexport class MqttConfigPage implements OnInit {\n  MQTTSERVER:string=\"192.168.1.100\";\n  MQTTPORT:number=9001;\n  MQTTClientLocal: Client;\n  number:number;\n  connected: number;  \n\n  general_data:string;//for debugging\n\n  constructor(public localSto: LocalStorageService ) { \n    this.number=0;\n    this.connected=0;\n  }\n\n  ngOnInit() {\n  /*  connect({host: this.MQTTSERVER, port: this.MQTTPORT, ssl: false,path:'/test/'})\n    .then(client => { this.MQTTClientLocal = client; });*/\n    \n  }\n\n  public saveClick(){\n    //console.log(\"clicked:\", this.MQTTSERVER,\":\", this.MQTTPORT);\n    this.saveValues();\n  }\n\n   public async Reset(){\n    //console.log(\"clicked:\", this.MQTTSERVER,\":\", this.MQTTPORT);\n\n    //this.getServer();\n    //this.getPort();  \n    this.connected=0;\n    \n    /*if(this.MQTTClientLocal!==null){    \n    \n    this.MQTTClientLocal.disconnect();\n    console.log(\"here\");\n    this.MQTTClientLocal= null;\n    }*/\n    //this.MQTTClientLocal= NULL;\n    \n    const client = await connect({host: this.MQTTSERVER, port: this.MQTTPORT, ssl: false,path:'/test/'})\n    //connect({host: \"192.168.1.100\", port: 9001, username:\"Laura\", password:\"123123\", ssl: false,path:'/test/'})\n    .then(client => { \n      console.log(client);\n      console.log(\"**************************************************************\");\n      console.log(\"*******************************************************************************\");\n      console.log(\"**************************************************************\");\n      \n      if(client.isConnected())\n        {this.connected=1;\n          this.MQTTClientLocal = client; \n          console.log(\"status: connected\");\n        }    \n    })\n    .catch (function(json) { \n      console.log(\"Error:\"+json.errorCode);\n      console.log(\"*******************************************************************************\");\n      console.log(\"**************************************************************\");\n      console.log(\"*******************************************************************************\");\n      if(json.errorCode == 7)\n        {alert(\"error: mala configuracion broker\");}\n      return this.connected=0;})\n    .finally(function(){return this.connected=0;}); \n  }\n\n  public pruebaClick(){\n    \n    this.number++;\n    this.MQTTClientLocal.publish('/mensajes', 'hello')\n\n  }\n  /**\n   * Saving port values to localStorage\n   */\n  public saveValues = async () => { \n    this.writeSecretFile(); \n    this.localSto.saveValuesString('MQTTSERVER',this.MQTTSERVER);\n    this.localSto.saveValuesNumber('MQTTPORT',this.MQTTPORT);\n    this.readSecretFile();\n  };\n\n  /**\n   * Get the server ip from the local storage\n   */\n  public getServer = async () => {\n    let { value } = await Storage.get({ key: 'MQTTSERVER' });    \n    let server=value;    \n    this.MQTTSERVER=server;\n    console.log('MQTTSERVER:'+this.MQTTSERVER);\n  };\n\n  /**\n   * Get the broker port from the local storage\n   */\n  public getPort = async () => {\n    \n    let {value}  = await Storage.get({ key: 'MQTTPORT' });    \n    let port=parseInt(value);  \n    this.MQTTPORT=port;\n    console.log('MQTTPORT:'+this.MQTTPORT);  \n  };\n\n  /**\n   * Read the server IP from the filesystem\n   */\n  \n  public writeSecretFile = async () => {\n    try {\n    const test=await Filesystem.writeFile({\n      path: 'mqtt.txt',\n      data: 'MQTTSERVER:'+this.MQTTSERVER+'\\nMQTTPort: '+this.MQTTPORT,\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8,\n    });\n    console.log(test);\n  } catch (e){\n    console.log(e);\n  }\n  };\n  \n  public readSecretFile = async () => {\n    try{\n    let contents = await Filesystem.readFile({\n      path: 'mqtt.txt',\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8,\n    });\n    \n    console.log('secrets:', contents);\n    this.general_data = contents.data.toString();    \n    \n    } catch (e){\n    console.log(e);\n  } \n\n  };\n  \n  public deleteSecretFile = async () => {\n    await Filesystem.deleteFile({\n      path: 'mqtt.txt',\n      directory: Directory.Documents,\n    });\n  };\n  \n  public readFilePath = async () => {\n    // Here's an example of reading a file with a full file path. Use this to\n    // read binary data (base64 encoded) from plugins that return File URIs, such as\n    // the Camera.\n    const contents = await Filesystem.readFile({\n      path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'\n    });\n  \n    console.log('data:', contents);\n  };\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}
{"version":3,"file":"src_app_doctor-main_doctor-main_module_ts.js","mappings":"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","sources":["./src/app/doctor-main/doctor-main-routing.module.ts","./src/app/doctor-main/doctor-main.module.ts","./src/app/doctor-main/doctor-main.page.ts","./src/app/models/message-model.ts","./src/app/models/user.ts","./src/app/services/mqtt.service.ts","./src/app/services/user.service.ts","./node_modules/@capacitor/app/dist/esm/definitions.js","./node_modules/@capacitor/app/dist/esm/index.js"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DoctorMainPage } from './doctor-main.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DoctorMainPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DoctorMainPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DoctorMainPageRoutingModule } from './doctor-main-routing.module';\n\nimport { DoctorMainPage } from './doctor-main.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DoctorMainPageRoutingModule\n  ],\n  declarations: [DoctorMainPage]\n})\nexport class DoctorMainPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LocalStorageService } from '../services/local-storage.service';\nimport { Storage } from '@capacitor/storage';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user';\nimport { Bed } from '../models/bed';\nimport { PacientsTable } from '../models/pacientsTable';\nimport { BedsService } from '../services/beds.service';\nimport { MessageModel } from '../models/message-model';\nimport { MqttService } from '../services/mqtt.service';\nimport { App } from '@capacitor/app';\n\n@Component({\n  selector: 'app-doctor-main',\n  templateUrl: './doctor-main.page.html',\n  styleUrls: ['./doctor-main.page.scss'],\n})\nexport class DoctorMainPage implements OnInit {\n  localDoctor: User= new User(0,\"\",\"\",\"\",\"\",0,\"\");\n  localBed: Bed = new Bed(0,0,0,0);\n  doctorId: number;\n  doctorName: string;\n  pacientNumber: number;\n  newMessage=false;\n  messages: Array<MessageModel> = new Array;\n  pacientTable: Array<PacientsTable> = new Array;\n  textResponse: string=\"\"  ;\n\n  constructor(private router:Router,\n    private activatedRoute: ActivatedRoute,\n    public localSto: LocalStorageService,\n    public bedlocal: BedsService,\n    public MQTTServ:MqttService,\n    public userServ: UserService\n    ) { \n    //this.doctorId = parseInt( this.activatedRoute.snapshot.paramMap.get(\"id\"));\n    this.doctorName=\"\";\n    \n  }\n\n  async ngOnInit() {\n   await this.getParams();\n   await this.getBeds();\n   \n    \n  }\n  onClickPacientNote(id:number){    \n    this.router.navigate(['/doctor-pacients/'+this.pacientNumber]);        \n  }\n  onClickMessages(){    \n    this.router.navigate(['/doctor-messages/'+this.doctorId]);        \n  }\n  /**\n   * Getting the parameters of the user from the local storage\n   */\n   async getParams() {\n    this.localDoctor=this.userServ.getUser();\n    this.doctorName = this.localDoctor.username;\n    \n   }\n   /***\n    * getting list of pacients and beds\n    */\n    \n    async getBeds() {\n   // console.log(\"Doctor logged:\"+this.localDoctor.username)    \n   // console.log(\"Doctor logged:\"+this.localDoctor.userId) \n    let  responseInfoTopic=\"/User/\"+this.localDoctor.userId+\"/Beds\";\n    await this.MQTTServ.MQTTClientLocal.subscribe(responseInfoTopic).on(Message=>{\n        let localMessage = JSON.parse(Message.string);\n        if(Message.toString()==\"Error\"){this.MQTTServ.MQTTClientLocal.unsubscribe(responseInfoTopic);}              \n        else{\n        //console.log(localMessage);\n        /*localMessage.forEach(element => {\n          this.pacientTable.push(element);\n        });*/\n        this.pacientTable=localMessage;\n        \n        this.MQTTServ.MQTTClientLocal.unsubscribe(responseInfoTopic)\n       // console.log(JSON.stringify(this.pacientTable=localMessage));\n       this.listenMessages();\n      }\n        \n      })    \n\n   // console.log(\"Doctor logged id:\"+this.localDoctor.userId)  \n    let a=new MessageModel(this.localDoctor.username,JSON.stringify(this.localDoctor.userId),  0, \"0\",9);    \n   // console.log(a)\n    let mqttmessage=JSON.stringify(a);\n   // console.log(mqttmessage);\n    let topic=\"/User/general\";\n    await this.MQTTServ.sendMesagge(topic, mqttmessage);\n  }\n\n  /**\n   * logout\n   */\n   logout(){\n    console.log(\"logging out\");\n    console.log(\"name:\"+this.localDoctor.username);\n   let question=\"logout\";\n      \n   let a=new MessageModel(this.localDoctor.username, question, 0, \"\",2);    \n   console.log(JSON.stringify(a));\n   let mqttmessage=(a).toString();\n  // console.log(mqttmessage);\n   let topic=\"/User/general\";\n   this.MQTTServ.sendMesagge(topic, JSON.stringify(a));  \n   \n   App.exitApp();   //this will close all services\n   //this.router.navigate(['/home/']);     \n   \n\n   \n  }\n  /**\n * go to general chat\n */\n   public goChat(){\n    /*   this.router.navigate(['/chat/]);        */\n    this.bedlocal.setBedId(0);\n    this.router.navigate(['/chat/']);        \n      }\n\n  \n\n  /**\n * \n * @param topic this will subscribe to a general messaging stack\n */\n    public async listenMessages(){\n   // console.log(\"El usuario es:\"+this.localDoctor.userId)\n    console.log(\"escuchando\")\n    console.log(\"aqui:\"+this.pacientTable.length)\n    let topic=\"/User/\"+this.localDoctor.userId+\"/questions/\";\n\n    this.pacientTable.forEach(element => {\n    //console.log(JSON.stringify(element)) ; \n    topic=\"/User/\"+this.localDoctor.userId+\"/questions/\"+element.pacientId;\n    console.log(\"topic: \"+topic)    \n    this.MQTTServ.MQTTClientLocal.subscribe(topic).on(Message=>{\n        let localMessage = JSON.parse(Message.string);\n        if(Message.toString()==\"Error\"){this.MQTTServ.MQTTClientLocal.unsubscribe(topic+\"#\");}      \n        //console.log(\"respuestaSystem2:  \"+localMessage[0].lastName);\n        console.log(\"here doc listening\");\n        \n        \n            \n        let receivedMessage = new MessageModel(localMessage._username,localMessage._content,localMessage._bedId,localMessage._time,localMessage._type);\n          console.log(\"Recibido por doc\");\n          \n          this.messages.push(receivedMessage);    \n          this.newMessage=true;          \n      })\n      \n    });\n    \n   \n  }\n\n  onChangeText(text:string){\n    this.textResponse=text;\n    //console.log(this.textResponse);\n  }\n\n  sendResponseText(id:number){\n    //console.log((this.pacientTable[id].pacientId));\n    let topic=\"/User/\"+this.localDoctor.userId+\"/answers/\"+this.pacientTable[id].pacientId;\n    console.log(topic);\n    let a=new MessageModel(this.localDoctor.username,this.textResponse,  this.pacientTable[id].bedId, \"0\",7);    \n    let mqttmessage=JSON.stringify(a);\n    console.log(\"sending:\",mqttmessage);    \n    this.MQTTServ.sendMesagge(topic, mqttmessage);  \n    this.messages.splice(id,1);  \n  }\n  sendAudioText(response:string, id:number){\n    let topic=\"/User/\"+this.localDoctor.userId+\"/answers/\"+this.pacientTable[id].pacientId;\n    let a=new MessageModel(this.localDoctor.username,response,  this.pacientTable[id].bedId, \"0\",27);    \n    let mqttmessage=JSON.stringify(a);    \n    this.MQTTServ.sendMesagge(topic, mqttmessage);\n  }\n\n  upgradingPacientNumber(id:number){\n    this.pacientNumber=id;\n  }\n\n}\n","export class MessageModel{\n    private _username: string;    \n    private _content: string;\n    private _bedId: number;\n    private _time: string;\n    private _type: number;\n\n    constructor(userName: string, content: string, bedId: number, time: string, type: number){\n        this._username= userName;\n        this._content= content;\n        this._bedId= bedId;\n        this._time= time;\n        this._type= type;\n    } \n\n    public get username(){\n        return this._username;\n    }\n    public get content(){\n        return this._content;\n    }\n    public get bedId(){\n        return this._bedId;\n    }\n    public get time(){\n        return this._time;\n    }\n    public get type(){\n        return this._type;\n    }\n\n    public set username(username: string){\n        this._username = username;\n    }\n    public set content(content: string){\n        this._content = content;\n    }\n    public set bedId(bedId: number){\n        this._bedId = bedId;\n    }\n    public set time(time: string){\n        this._time = time;\n    }\n    public set type(type: number){\n        this._type = type;\n    }\n    \n}\n","export class User{\n    private _userId: number;\n    private _username: string;\n    private _firstname: string;\n    private _lastname: string;\n    private _occupation: string;\n    private _state: number;\n    private _password: string;\n\n    constructor(userId: number, username: string, firstName: string, lastName: string, occupation: string, state: number, password: string){\n        this._userId = userId;\n        this._username = username;\n        this._firstname= firstName;\n        this._lastname= lastName;\n        this._occupation= occupation;\n        this._state = state;\n        this._password=password;\n    }\n\n    public set userId(value: number){\n        this._userId=value;        \n    }\n    public set username(value: string){\n        this._username= value;\n    }\n    public set firstname(value: string){\n        this._firstname= value;\n    }\n    public set lastname (value: string){\n        this._lastname= value;\n    }\n    public set occupation(value: string){\n        this._occupation= value;\n    }\n    public set state(state: number){\n        this._state= state;\n    }\n    public set password(password: string ){\n        this._password = password;\n    }\n\n\n    public get userId(): number{\n       return this._userId;\n    }\n    public get username(): string{\n       return this._username;\n    }\n    public get firstName():string{\n        return this._firstname;\n    }\n    public get lastName(): string{\n        return this._lastname;\n    }\n    public get occupation(): string{\n        return this._occupation;\n    }\n    public get state(): number{\n        return this._state;\n    }\n    public get password(): string{\n        return this._password;\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport {Client, connect} from 'rsup-mqtt'\nimport { LocalStorageService } from '../services/local-storage.service';\nimport { Storage } from '@capacitor/storage';\nimport { MessageModel } from '../models/message-model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MqttService implements OnInit  {\n  MQTTSERVER:string=\"127.0.0.2\";\n  MQTTPORT:number=9001;\n  MQTTClientLocal: Client;\n  number:number;\n  connected: number;\n  mqttMessages: Array<MessageModel> = new Array;\n  public msgAlert=false;\n\n  constructor(public localSto: LocalStorageService) { }\n\n  \n  ngOnInit() {\n    connect({host: this.MQTTSERVER, port: this.MQTTPORT, ssl: false,path:'/test/'})\n    .then(client => { this.MQTTClientLocal = client; });\n    \n  }\n  /**\n   * Saving port values to localStorage\n   */\n   public saveValues = async () => {  \n    this.localSto.saveValuesString('MQTTSERVER',this.MQTTSERVER);\n    this.localSto.saveValuesNumber('MQTTPORT',this.MQTTPORT);\n  };\n\n  /**\n   * Get the server ip from the local storage\n   */\n  public getServer = async () => {\n    let { value } = await Storage.get({ key: 'MQTTSERVER' });    \n    let server=value;    \n    this.MQTTSERVER=server;\n    console.log('MQTTSERVER:'+this.MQTTSERVER);\n  };\n\n  /**\n   * Get the broker port from the local storage\n   */\n  public getPort = async () => {\n    \n    let {value}  = await Storage.get({ key: 'MQTTPORT' });    \n    let port=parseInt(value);  \n    this.MQTTPORT=port;\n    console.log('MQTTPORT:'+this.MQTTPORT);  \n  };\n\n  public Reset(){\n    //console.log(\"clicked:\", this.MQTTSERVER,\":\", this.MQTTPORT);\n\n    this.getServer();\n    this.getPort();  \n    this.connected=0;\n    \n    if(this.MQTTClientLocal!==null){\n    this.MQTTClientLocal.disconnect();\n    console.log(\"here\");\n    this.MQTTClientLocal= null;\n    }\n    //this.MQTTClientLocal= NULL;\n    \n    connect({host: this.MQTTSERVER, port: this.MQTTPORT, ssl: false,path:'/test/'})\n    .then(client => { \n      console.log(client);\n      if(client.isConnected())\n        {this.connected=1;\n          this.MQTTClientLocal = client; \n          console.log(\"status: connected\");\n        }    \n    });\n    \n  }\n  public sendMesagge(topic: string, message: string){\n      \n    this.MQTTClientLocal.publish(topic, message,{retain: true});\n  }\n\n   public async Connect(usernameP:string, passwordP:string): Promise<number>{\n    let connected=0;\n    \n    //this.client=Mqtt.Client(\"myclient\");\n    this.getServer();\n    this.getPort();\n    console.log(\"here:\"+this.MQTTSERVER);\n    await connect({host: this.MQTTSERVER, port: this.MQTTPORT, username: usernameP, password: passwordP, ssl: false,path:'/test/'})\n    //connect({host: \"192.168.1.100\", port: 9001, username: usernameP, password: passwordP, ssl: false,path:'/test/'})\n    .then(client => { \n      console.log(client);\n      if(client.isConnected())\n        {connected=1;\n          this.MQTTClientLocal = client; \n          console.log(\"status: connected\");          \n          return 1;\n        }\n        throw new TypeError(\"No connection\")    \n    })\n    .catch (function(json) { \n      console.log(json); connected=0; \n      if(json.errorCode == 7)\n        {alert(\"error: mala configuracion broker\");}\n      return connected;})\n    .finally(function(){return connected;}); \n  \n  return connected;\n    \n  }\n\n  public listenToTopic(topic: string){\n      console.log(\"here\");\n     //this.MQTTClientLocal.onMessage(topic, message=>console.log(message.string));\n  //   this.MQTTClientLocal.subscribe(topic).on(Message=>console.log(Message.string));\n  }\n/**\n * \n * @param topic this will subscribe to a general messaging stack\n */\n  public listenMessages(topic: string){\n    console.log(\"here\");\n   this.MQTTClientLocal.onMessage(topic, Message=>{\n    let localMessage = JSON.parse(Message.string);      \n      \n    let receivedMessage = new MessageModel(localMessage._username,localMessage._content,localMessage._bedId,localMessage._time,localMessage._type);\n    console.log(\"Recibido por doc\");\n    if((this.mqttMessages[this.mqttMessages.length - 1])!==receivedMessage){   \n    this.mqttMessages.push(receivedMessage);    \n    this.msgAlert=true;\n    }\n   \n  });\n   this.MQTTClientLocal.subscribe(topic).on(Message=>console.log(Message.string));\n  }\n  public closingAll(topic: string){\n    this.MQTTClientLocal.removeMessageListener(topic, message=>console.log(message.string));\n    \n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  \n  private loggedUser: User = new User(0,\"\",\"\",\"\",\"\",0,\"\");\n\n  constructor() { \n   \n  }\n\n  /**\n   * Getting the current loged user\n  */\n  public getUser(): User {\n    return this.loggedUser;\n  }\n  /**\n   * Setting the current loged user(after validation from server)\n  */\n\n   public setUser(userId: number, userName: string, userFirstName: string, userLastName: string,usermode: string): User {\n    this.loggedUser.userId = userId;\n    this.loggedUser.firstname= userFirstName;\n    this.loggedUser.lastname= userLastName;\n    this.loggedUser.occupation= usermode;\n    this.loggedUser.username= userName;\n    return this.loggedUser;\n  }\n  \n}\n","export {};\n","import { registerPlugin } from '@capacitor/core';\nconst App = registerPlugin('App', {\n    web: () => import('./web').then(m => new m.AppWeb()),\n});\nexport * from './definitions';\nexport { App };\n"],"names":[],"sourceRoot":"webpack:///"}
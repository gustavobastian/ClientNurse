{"version":3,"file":"src_app_waiting-event_waiting-event_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEC;AAExD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iEAAgB;KAC5B;CACF,CAAC;IAMW,6BAA6B,SAA7B,6BAA6B;CAAG;AAAhC,6BAA6B;IAJzC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,6BAA6B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBD;AACM;AACF;AAEA;AAEkC;AAEvB;IAW3C,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IATlC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,wFAA6B;SAC9B;QACD,YAAY,EAAE,CAAC,iEAAgB,CAAC;KACjC,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBe;AACO;AACF;AACiB;AACjB;IAO1C,gBAAgB,SAAhB,gBAAgB;IAK3B,YAAoB,cAA8B,EAAQ,QAAoB,EAAQ,QAA6B,EAAS,MAAa;QAArH,mBAAc,GAAd,cAAc,CAAgB;QAAQ,aAAQ,GAAR,QAAQ,CAAY;QAAQ,aAAQ,GAAR,QAAQ,CAAqB;QAAS,WAAM,GAAN,MAAM,CAAO;QAFzI,aAAQ,GAAwB,IAAI,KAAK,CAAC;IAEmG,CAAC;IAE9I,QAAQ;QACN,UAAU,CAAC,GAAE,EAAE;YACb,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC,EAAC,GAAG,CAAC,CAAC;IACT,CAAC;IAED;;;;OAIG;IACF,kBAAkB;QACjB,IAAI,KAAK,GAAC,iBAAiB,CAAC;QAE5B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,GAAE;YAC3D,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE9C,IAAI,eAAe,GAAG,IAAI,+DAAY,CAAC,YAAY,CAAC,SAAS,EAAC,YAAY,CAAC,QAAQ,EAAC,YAAY,CAAC,MAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAG5H,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC7B,mCAAmC;QAEnC,CAAC,CAAC,CAAC;IACL,CAAC;IACD,OAAO,CAAC,CAAQ;QACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAClC,CAAC;CACF;;YA9CQ,2DAAc;YAGd,+DAAW;YADX,gFAAmB;YAFH,mDAAM;;AAUlB,gBAAgB;IAL5B,wDAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,0EAAwC;;KAEzC,CAAC;GACW,gBAAgB,CAoC5B;AApC4B","sources":["./src/app/waiting-event/waiting-event-routing.module.ts","./src/app/waiting-event/waiting-event.module.ts","./src/app/waiting-event/waiting-event.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { WaitingEventPage } from './waiting-event.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WaitingEventPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class WaitingEventPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { WaitingEventPageRoutingModule } from './waiting-event-routing.module';\n\nimport { WaitingEventPage } from './waiting-event.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    WaitingEventPageRoutingModule\n  ],\n  declarations: [WaitingEventPage]\n})\nexport class WaitingEventPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MessageModel } from '../models/message-model';\nimport { LocalStorageService } from '../services/local-storage.service';\nimport { MqttService } from '../services/mqtt.service';\n\n@Component({\n  selector: 'app-waiting-event',\n  templateUrl: './waiting-event.page.html',\n  styleUrls: ['./waiting-event.page.scss'],\n})\nexport class WaitingEventPage implements OnInit {\n  usernameLocal: string;\n  bedId: number;\n  messages: Array<MessageModel> = new Array;\n\n  constructor(private activatedRoute: ActivatedRoute,public MQTTServ:MqttService,public localSto: LocalStorageService,private router:Router) { }\n\n  ngOnInit() {\n    setTimeout(()=>{\n      this.eventsSubscription();\n    },600);\n  }\n\n  /**\n   * Subscription for receiving messages\n   * kind of messages waiting for: {\"_bedId\":2,\"_content\":\"alert\",\"_time\":\"today\",\"_username\":\"system\"}\n   * It is only used the bedId parameter\n   */\n   eventsSubscription(){\n    let topic=\"/caller-events/\";\n    \n    this.MQTTServ.MQTTClientLocal.subscribe(topic).on(Message=>{\n    let localMessage = JSON.parse(Message.string);      \n      \n    let receivedMessage = new MessageModel(localMessage._username,localMessage._content,localMessage._bedId,localMessage._time);\n  \n    \n    this.messages.push(receivedMessage);    \n    console.log(receivedMessage);  \n    //this.messages[0]=receivedMessage;\n  \n    });\n  }\n  onClick(i:number){\n    this.router.navigate(['/chat']);        \n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}